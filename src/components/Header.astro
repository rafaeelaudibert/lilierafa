---
import { WEDDING_CONFIG, type Locale } from "../constants/wedding"
import { getLocale } from "astro-i18n-aut"

const locale = getLocale(Astro.url) as Locale
const config = WEDDING_CONFIG[locale]

console.log(Astro.url, locale, config)
---

<header
  id="header-nav"
  class="w-full fixed top-0 left-0 z-50 backdrop-blur transition-all duration-600"
>
  <div class="max-w-6xl mx-auto px-4 py-4">
    <div class="flex flex-row justify-between sm:grid grid-cols-3 items-center">
      <div class="hidden sm:flex justify-start gap-4">
        {
          config.navigation.map((link) => (
            <a
              href={link.href}
              class="nav-link text-white transition-colors duration-600"
            >
              {link.label}
            </a>
          ))
        }
      </div>
      <div class="flex justify-center">
        <a
          id="header-logo"
          href="#hero-reference"
          class="font-semibold text-white sm:text-gray-800 transition-all sm:opacity-0 duration-600"
          >{config.couple.them}</a
        >
      </div>
      <div class="flex justify-end">
        <a
          href="#rsvp"
          id="header-button"
          class="px-4 py-2 rounded-full text-sm transition-all duration-600"
        >
          I'm coming!
        </a>
      </div>
    </div>
  </div>
</header>

<script>
  const headerLogo = document.getElementById("header-logo")!
  const navLinks = document.querySelectorAll(".nav-link")!
  const headerButton = document.getElementById("header-button")!

  function updateHeaderStyles() {
    const scrollY = window.scrollY
    const threshold = window.innerHeight - 100 // 100dvh equivalent

    if (scrollY < threshold) {
      // Initial state: white text, transparent background
      navLinks.forEach((link) => {
        link.classList.remove("text-gray-800")
        link.classList.add("text-white")
      })
      headerLogo.classList.add("text-white", "sm:opacity-0")
      headerLogo.classList.remove("text-gray-800", "sm:opacity-100")
      headerButton.classList.remove(
        "bg-gray-800",
        "text-white",
        "hover:bg-gray-700"
      )
      headerButton.classList.add(
        "bg-white",
        "text-slate-600",
        "hover:bg-gray-100"
      )
    } else {
      // Scrolled state: original colors
      navLinks.forEach((link) => {
        link.classList.remove("text-white")
        link.classList.add("text-gray-800")
      })
      headerLogo.classList.remove("text-white", "sm:opacity-0")
      headerLogo.classList.add("text-gray-800", "sm:opacity-100")
      headerButton.classList.remove(
        "bg-white",
        "text-slate-600",
        "hover:bg-gray-100"
      )
      headerButton.classList.add(
        "bg-gray-800",
        "text-white",
        "hover:bg-gray-700"
      )
    }
  }

  // Initial call
  updateHeaderStyles()

  // Listen for scroll events
  window.addEventListener("scroll", updateHeaderStyles)
</script>
